// Code generated by go-bindata.
// sources:
// ../api/schema/common.graphql
// ../api/schema/mutation.graphql
// ../api/schema/query.graphql
// ../api/schema/review.graphql
// ../api/schema/schema.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ApiSchemaCommonGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\x3d\x4e\xc4\x40\x0c\x46\x7b\x9f\xe2\x5b\x6d\x8b\xf6\x00\xe9\x96\x0c\xc5\x34\x21\x52\x4e\x30\x64\x9c\x64\x10\xd8\xc8\xe3\xf0\x23\x94\xbb\x23\xa2\xd0\xa0\xed\xac\xf7\xfc\xec\x33\xae\x02\x7d\x7a\xe6\xd1\xf1\x51\x7c\x41\x12\xc4\x70\xa1\x22\xce\x36\xa5\x91\xd1\x69\x66\x7c\x13\x00\x9c\x11\x03\x74\x82\x2f\x7c\x34\x97\x9d\x97\xdc\x20\x86\x13\x6d\x44\xfe\xf5\xc6\xe8\xd3\xcc\x51\x26\x3d\x32\x96\xdc\xae\x56\xd5\x1a\x0c\x6e\x45\xe6\x9d\x2e\xa9\x76\xfc\xe9\xbf\xbb\x0d\xee\x55\x5f\x38\xc9\xe9\xcf\xf4\xc6\xef\x45\xd7\x7a\xc3\x56\x4f\xe6\xff\xee\x6d\x44\x2c\xeb\x2b\x1e\x2d\xb3\x85\x62\x3c\x7a\x51\x39\xde\x5f\x87\xf6\x6e\x1f\xc2\xc3\xd0\xd2\xf6\x13\x00\x00\xff\xff\xf6\xaf\x01\x06\xf2\x00\x00\x00")

func ApiSchemaCommonGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaCommonGraphql,
		"../api/schema/common.graphql",
	)
}

func ApiSchemaCommonGraphql() (*asset, error) {
	bytes, err := ApiSchemaCommonGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/common.graphql", size: 242, mode: os.FileMode(420), modTime: time.Unix(1589631104, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ApiSchemaMutationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xf0\x2d\x2d\x49\x2c\xc9\xcc\xcf\x53\xa8\xe6\x52\x50\x50\x50\x50\x56\x78\xbd\x6c\xcd\xeb\xed\x1b\x14\xde\xcc\x9b\xf8\xa6\x65\x23\x58\x2c\xb9\x28\x35\xb1\x24\x35\x28\xb5\x2c\x33\xb5\x5c\x23\x33\xaf\xa0\xb4\xc4\x4a\xc1\x19\x49\xcc\x13\x24\xa4\xa8\x69\xa5\x00\xe1\xa2\x99\xd3\x31\xe3\xcd\x82\xa9\x60\xb1\xd2\x82\x14\x0c\x73\x42\x91\xc4\xf0\x9b\xd3\xb4\xf6\xcd\x82\x39\x60\xb1\x94\xd4\x9c\x54\x84\x39\x29\x56\x0a\x9e\x2e\x20\x5d\x4e\xf9\xf9\x39\xa9\x89\x79\x8a\x5c\xb5\x80\x00\x00\x00\xff\xff\x20\x72\xe4\xb3\xd9\x00\x00\x00")

func ApiSchemaMutationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaMutationGraphql,
		"../api/schema/mutation.graphql",
	)
}

func ApiSchemaMutationGraphql() (*asset, error) {
	bytes, err := ApiSchemaMutationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/mutation.graphql", size: 217, mode: os.FileMode(420), modTime: time.Unix(1590502210, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ApiSchemaQueryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x2c\x4d\x2d\xaa\x54\xa8\xe6\x52\x50\x50\x50\x28\xc8\xcc\x4b\xb7\x52\x08\x2e\x29\xca\xcc\x4b\x57\xe4\x02\x0b\x29\x2b\xbc\x5e\xb6\xe6\xf5\xf6\x0d\x20\xea\x4d\xd7\x92\xb7\x5d\x3b\x14\xde\x2c\xdc\xf0\x76\x56\x0f\x58\xb6\x28\xb5\x2c\x33\xb5\xbc\x58\x23\x31\xad\x24\xb5\x08\xa6\x53\x47\x21\x29\x35\x2d\xbf\x28\x15\xc1\x4f\xcb\x2c\x2a\x2e\xb1\x52\xf0\xcc\x2b\xd1\x51\xc8\x49\x84\x33\xf3\x8b\x52\x52\x8b\x9c\x2a\xad\x14\x82\xc0\xc6\xf8\x83\xb8\x9a\x30\x9e\x73\x7e\x5e\x5e\x6a\x72\x49\x66\x7e\x9e\x22\xaa\x43\x30\xac\xd7\xc8\x4c\xb1\x52\xf0\x74\x51\x84\x6b\x55\xe4\xaa\xe5\x02\x04\x00\x00\xff\xff\xe3\x70\xab\x03\xdc\x00\x00\x00")

func ApiSchemaQueryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaQueryGraphql,
		"../api/schema/query.graphql",
	)
}

func ApiSchemaQueryGraphql() (*asset, error) {
	bytes, err := ApiSchemaQueryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/query.graphql", size: 220, mode: os.FileMode(420), modTime: time.Unix(1590502411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ApiSchemaReviewGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\xcd\x8a\xd4\x40\x10\xbe\xe7\x29\x6a\xd8\xbb\x0f\x90\xdb\x30\xd9\x81\x5c\x74\x71\x67\x4f\x22\x12\xd3\x35\xb1\x21\x53\x1d\x3a\x9d\x15\x91\x81\x15\x83\x2c\x28\x3a\x1e\x84\x3d\xcc\x2c\x23\x88\xa0\x78\x50\xd9\xc5\x11\xf4\x85\x26\xbd\xef\x20\xe9\x74\x7e\x26\x82\x2e\x78\xf2\xd6\x5f\xf5\x57\x5f\x55\x7d\x5d\xbd\x07\x43\x90\x78\xcc\xf1\xa1\xa3\x1e\x25\x08\xb7\xcd\x19\xf8\x2c\x89\x71\x86\xa4\x52\xb8\x29\x18\xc2\x63\x07\x00\x60\x0f\x7c\x0f\xc4\x14\xd4\x03\xb4\x49\x37\x4c\x9c\x33\x17\x7c\x6f\x60\x39\x7a\xbd\x2c\x3e\x7e\x30\x40\x71\x15\xa3\x0b\x87\x4a\x72\x8a\xea\xfb\xe2\xfd\xa7\xe2\xdb\x67\x03\x42\x41\x0a\x49\xf5\x19\xfa\x62\xa5\xd7\x8b\x4a\x41\xa8\x20\x3e\x0c\x85\x44\x17\xc6\xb1\x08\x54\xc3\x79\xfa\x44\xe7\x1b\xd0\xeb\x85\x3e\x3d\x33\xb1\xb4\x62\x55\x13\x98\x94\x86\x7b\xfe\x5a\xe7\x5f\xf4\xea\x87\xc1\x59\xc2\x02\x85\x6c\xd8\x29\x3b\x77\x9c\xba\xaf\x5a\xb1\xe3\x86\xd1\x6a\x2c\xd8\x6e\x4e\xf5\x9b\xb7\x06\x48\xd3\xbb\x4f\x4d\x53\xdb\x8b\x93\x52\xe5\x7b\x6e\xf0\x2c\xe0\xe5\x78\x01\x85\x38\x46\x4c\x77\x99\x97\x8b\xab\x67\x97\x06\x24\xd9\xfd\x98\x87\x13\x19\x50\x9a\x08\xb9\x2b\x78\xf5\x72\xa3\x57\x67\xfa\xf9\x52\xe7\xef\x6a\xc7\x8e\x91\x38\x52\x88\x3b\x44\x7d\x9e\x17\x2f\x4e\xf4\x6a\x63\x70\x1c\x10\x8b\x85\x64\x96\x32\x77\xba\xe3\xec\xb3\xa8\x9e\x26\xcc\x64\x2a\xe4\xae\xfd\x24\x58\xe3\x62\x2f\x73\x24\x88\x30\x54\x5c\x90\xcd\x47\x16\x95\x73\xdd\x69\x85\xef\x36\x1a\x6d\xbc\x8a\x25\x41\x84\x3e\x4d\x85\x0b\x07\xf6\x34\x68\x5f\x78\x24\xb2\xc6\xca\xb9\xe3\x20\x65\x33\x5b\x73\xcc\x31\x66\xb6\xdc\xd1\x81\x37\x9c\xec\x7b\xf7\x86\x93\x92\xc4\x29\xc9\x94\x65\xdd\x92\x0c\xa5\x65\x4d\xcb\x0c\xb7\x9b\x5e\x15\x62\x5c\x56\xcd\xbb\x60\xe8\x5e\x8d\x07\xad\xda\x48\x62\xa0\xb0\x4a\xf5\x4d\xa4\x7e\x76\xbd\xcc\x8b\x57\xb9\x75\x57\xf5\x96\x71\xfb\xf5\x67\x73\x49\x51\x7f\x53\xff\xfd\x3f\xfc\x69\xc9\x4d\x9b\x9d\x11\x8e\xcc\x7a\xff\x3e\xc2\xf5\x3e\xe9\x5f\x7b\xba\x76\x4b\xfd\x27\x6a\x6f\xfe\xeb\xaf\xf4\x2b\x00\x00\xff\xff\xfb\xe8\xc8\x4f\x31\x05\x00\x00")

func ApiSchemaReviewGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaReviewGraphql,
		"../api/schema/review.graphql",
	)
}

func ApiSchemaReviewGraphql() (*asset, error) {
	bytes, err := ApiSchemaReviewGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/review.graphql", size: 1329, mode: os.FileMode(420), modTime: time.Unix(1590671142, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ApiSchemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x50\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x60\x81\xdc\xd2\x92\xc4\x92\xcc\xfc\x3c\x2b\x05\x5f\x28\x8b\xab\x96\x0b\x10\x00\x00\xff\xff\xf7\xd1\xd7\x38\x33\x00\x00\x00")

func ApiSchemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaSchemaGraphql,
		"../api/schema/schema.graphql",
	)
}

func ApiSchemaSchemaGraphql() (*asset, error) {
	bytes, err := ApiSchemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/schema.graphql", size: 51, mode: os.FileMode(420), modTime: time.Unix(1589098041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../api/schema/common.graphql": ApiSchemaCommonGraphql,
	"../api/schema/mutation.graphql": ApiSchemaMutationGraphql,
	"../api/schema/query.graphql": ApiSchemaQueryGraphql,
	"../api/schema/review.graphql": ApiSchemaReviewGraphql,
	"../api/schema/schema.graphql": ApiSchemaSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"api": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"common.graphql": &bintree{ApiSchemaCommonGraphql, map[string]*bintree{}},
				"mutation.graphql": &bintree{ApiSchemaMutationGraphql, map[string]*bintree{}},
				"query.graphql": &bintree{ApiSchemaQueryGraphql, map[string]*bintree{}},
				"review.graphql": &bintree{ApiSchemaReviewGraphql, map[string]*bintree{}},
				"schema.graphql": &bintree{ApiSchemaSchemaGraphql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

