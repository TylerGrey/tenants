// Code generated by go-bindata.
// sources:
// ../api/schema/bldg.graphql
// ../api/schema/common.graphql
// ../api/schema/mutation.graphql
// ../api/schema/query.graphql
// ../api/schema/review.graphql
// ../api/schema/schema.graphql
// ../api/schema/search.graphql
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ApiSchemaBldgGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\xca\x49\x49\x57\xa8\xe6\x52\x50\xc8\x4c\xb1\x52\xf0\x74\x51\xe4\x52\x50\xc8\x49\x2c\xb1\x52\x70\xcb\xc9\x4f\x2c\x01\xf3\xf2\xd2\x91\x78\x45\x89\x25\x99\x28\x02\x89\x29\x29\x45\xa9\xc5\xc5\x56\x0a\xc1\x25\x45\x99\x79\xe9\x60\x35\xf9\x89\x29\x8e\x98\xc2\xa5\x05\x29\x89\x25\xa9\x29\xf1\x20\xd3\x61\xa2\xb5\x5c\x80\x00\x00\x00\xff\xff\x77\x35\xd4\x59\x85\x00\x00\x00")

func ApiSchemaBldgGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaBldgGraphql,
		"../api/schema/bldg.graphql",
	)
}

func ApiSchemaBldgGraphql() (*asset, error) {
	bytes, err := ApiSchemaBldgGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/bldg.graphql", size: 133, mode: os.FileMode(420), modTime: time.Unix(1591880041, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ApiSchemaCommonGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x4d\x4e\x85\x40\x10\x84\xf7\x7d\x8a\x7a\x79\x7b\x0e\xc0\x0e\x19\x17\xb3\x41\x12\x4e\x30\x32\x0d\x8c\xd1\x6e\xd3\xd3\xf8\x13\xc3\xdd\x8d\xe8\xca\xb7\xad\xaa\xaf\xbe\x2b\x3a\x81\x3e\x3e\xf1\xec\x78\x2f\xbe\x21\x09\x62\x68\xa8\x88\xb3\x2d\x69\x66\x0c\x9a\x19\x5f\x04\x5c\x11\x03\x74\x81\x6f\xfc\x47\x34\x04\x94\xdc\x22\x86\x0b\x1d\x44\xfe\xf9\xca\x18\xd3\xca\x51\x16\x3d\x11\x96\xdc\xef\x56\xd5\x5a\x4c\x6e\x45\x56\x02\xb6\x54\x07\xfe\xf0\x9f\x5d\x8b\x3b\xd5\x67\x4e\x72\xf9\xcd\x47\xe3\xb7\xa2\x7b\xbd\xe9\xaa\x27\xf3\x7f\x4f\x07\x11\xcb\xfe\x82\x07\xcb\x6c\xa1\x18\xcf\x5e\x54\x4e\x6d\x37\xf5\x04\x84\xfb\xa9\xa7\x83\xbe\x03\x00\x00\xff\xff\xd4\x4f\x25\x3d\xe2\x00\x00\x00")

func ApiSchemaCommonGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaCommonGraphql,
		"../api/schema/common.graphql",
	)
}

func ApiSchemaCommonGraphql() (*asset, error) {
	bytes, err := ApiSchemaCommonGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/common.graphql", size: 226, mode: os.FileMode(420), modTime: time.Unix(1591880051, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ApiSchemaMutationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\xf0\x2d\x2d\x49\x2c\xc9\xcc\xcf\x53\xa8\xe6\x52\x50\x50\x56\x78\xbd\x6c\xcd\xeb\xed\x1b\x14\xde\xcc\x9b\xf8\xa6\x65\x23\x97\x82\x42\x72\x51\x6a\x62\x49\x6a\x50\x6a\x59\x66\x6a\xb9\x46\x66\x5e\x41\x69\x89\x95\x82\x33\x92\x98\x27\x48\x48\x51\xd3\x4a\x01\xc2\x45\x31\xa3\x63\xc6\x9b\x05\x53\xb9\x14\x14\x4a\x0b\x52\x30\xcc\x08\x45\x12\xc3\x67\x46\xd3\xda\x37\x0b\xe6\x70\x29\x28\xa4\xa4\xe6\xa4\x22\xcc\x48\xb1\x52\xf0\x74\x01\xe9\x70\xca\xcf\xcf\x49\x4d\xcc\x53\xe4\xaa\xe5\x02\x04\x00\x00\xff\xff\xb9\x58\xf7\x01\xce\x00\x00\x00")

func ApiSchemaMutationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaMutationGraphql,
		"../api/schema/mutation.graphql",
	)
}

func ApiSchemaMutationGraphql() (*asset, error) {
	bytes, err := ApiSchemaMutationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/mutation.graphql", size: 206, mode: os.FileMode(420), modTime: time.Unix(1591880048, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ApiSchemaQueryGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\x41\x4a\x03\x31\x14\x86\xf7\x39\xc5\x3f\xb8\x19\xc1\x13\xcc\xb2\x8a\x30\x2b\xb1\x5d\x8a\x8b\x38\xf3\x66\x0c\x84\xa4\x26\xa9\x32\x88\x20\x08\x82\xa5\x27\x70\x27\x8a\xab\x2e\xaa\x08\xba\xe8\x89\x3a\xe9\x1d\x24\x19\xa7\x56\x57\xe1\x7b\x79\xef\xe5\xcb\xef\x9a\x31\xe1\x78\x42\xa6\xc1\x35\x03\xc6\x42\xd5\x19\x46\xce\x08\x55\x27\x8c\x01\x3b\x68\x5f\xe7\xed\xe7\x22\x1c\x7e\xfa\xb2\x9e\x7e\xc1\x3f\x2d\xd6\x8f\x33\x06\x18\xba\x14\x74\x65\x53\x06\x00\x67\xb2\xac\xf3\x32\x43\x7e\x90\x44\xe6\x95\x23\xd3\xaf\xea\x3a\xa8\xd2\x86\xfe\x94\x2a\x61\xac\xcb\x90\x2b\x17\x51\xf2\x6d\xd2\xa6\x24\x33\x68\x32\x0c\xe3\x3b\x47\x01\x19\xb0\xdb\x17\xf6\xb5\x52\x54\x38\xa1\x55\xb2\x2d\xfa\x4f\x2f\x15\x9d\xd4\x66\xac\xfb\xd5\xea\xed\xa3\x9d\x2f\x7f\x9b\x83\xbe\x4d\x25\x77\x19\x0e\xa5\xe6\x2e\xd9\x83\x0c\x51\xf4\x60\x0b\x2e\x29\xba\x85\x4d\x27\x03\x59\xd6\xc9\xe9\x4f\x42\xfe\x79\xe9\xef\x67\x58\xbd\xdf\xfa\xbb\x07\x06\x58\xe2\xa6\x38\x4f\x2f\x42\xaa\x9b\x30\xc3\xd4\x28\x5e\x0c\xc9\x4e\xa4\x0b\xd3\x37\xec\x3b\x00\x00\xff\xff\x5a\x09\x2a\x29\x7f\x01\x00\x00")

func ApiSchemaQueryGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaQueryGraphql,
		"../api/schema/query.graphql",
	)
}

func ApiSchemaQueryGraphql() (*asset, error) {
	bytes, err := ApiSchemaQueryGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/query.graphql", size: 383, mode: os.FileMode(420), modTime: time.Unix(1591545027, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ApiSchemaReviewGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\x4d\x8b\x13\x41\x10\xbd\xf7\xaf\xa8\xb0\x77\x7f\xc0\xdc\x42\x66\x03\x73\xd1\xc5\xcd\x9e\x44\x64\x9c\xae\x8c\x0d\x93\xea\xa1\xa7\x67\x45\x24\xb0\xe2\x20\x0b\x8a\xc6\x83\xb0\x87\x64\x89\x20\x82\xe2\x41\x65\x17\x23\xe8\x1f\xca\xf4\xfe\x07\x99\x9e\x4e\xd2\x09\xf8\x81\xb7\xbd\xcd\xf4\x7b\xaf\xea\xd5\xeb\xea\x3d\xe8\x82\xc2\x63\x81\x0f\x99\x7e\x94\x23\xdc\xb6\xdf\x20\x46\x79\x86\x23\x24\x5d\xc0\x4d\xc9\x11\x1e\x33\x80\x3d\x88\x42\x90\x43\xd0\x0f\xd0\x49\x6e\x30\x00\xc1\x03\x88\xc2\x8e\xc5\xcd\x7c\x5a\x7f\xfc\xc0\x00\xb4\xd0\x19\x06\x70\xa8\x95\xa0\xb4\xc5\xea\xf7\x9f\xea\x6f\x9f\x19\x40\x22\x49\x23\xe9\x6d\xd4\x5c\xcc\xcc\x7c\xd2\x28\xa5\x8e\xb3\xc3\x44\x2a\x0c\xa0\x9f\xc9\x58\x3b\xfc\xe9\x13\x53\x2d\xc0\xcc\x27\xe6\xf4\x8c\x01\x14\x2d\xa3\x75\x6b\xe9\x8e\x77\xfe\xda\x54\x5f\xcc\xec\x07\x03\x28\x73\x1e\x6b\xe4\x5d\xaf\xd5\x98\xb1\x95\x93\x55\x2d\x6f\x6a\x5b\xc7\x8d\xba\x5c\x9c\x9a\x37\x6f\x19\x80\xb2\x5e\x23\x72\x46\x96\x17\x27\x8d\xfe\x7b\xc5\x00\x46\xb1\x68\x46\x89\x29\xc1\x3e\x62\xe1\xb3\x2e\x27\x57\xcf\x2e\x19\x40\x5e\xde\xcf\x44\x32\x50\x31\x15\xb9\x54\x7e\xa1\xab\x97\x0b\x33\x3b\x33\xcf\xa7\xa6\x7a\xd7\xa6\x72\x8c\x24\x90\x12\xf4\x48\xe6\xbc\xaa\x5f\x9c\x98\xd9\x82\x01\x64\x31\xf1\x4c\x2a\xee\xe0\x31\xf3\xad\xef\xf3\xb4\x75\x9e\x94\xaa\x90\xca\x0f\x97\x24\x5f\x27\xb5\xa3\xea\x49\x22\x4c\xb4\x90\x64\xb5\xc8\xd3\x66\x8a\x3b\x9b\x92\x77\x9d\x7e\x73\xda\x9c\xe4\x71\x8a\x11\x0d\x65\x00\x07\xee\xab\xb3\xba\xb9\x9e\x2c\xd7\x71\x8d\x19\x43\x2a\x47\xae\x57\x5f\x60\xc6\x6d\x9b\xa3\x83\xb0\x3b\xd8\x0f\xef\x75\x07\x0d\x45\x50\x5e\x6a\xc7\xb9\xa5\x38\x2a\xcb\x19\x36\xec\xc0\x97\x36\x2d\xb8\x50\xad\xdd\x00\x2c\x35\x5c\xfd\x77\x36\x95\x7a\x0a\x63\x8d\xad\x30\xb2\x27\xed\x85\x9a\x69\x55\xbf\xaa\x6c\x8e\x7a\x6b\xb5\x96\x5f\x7f\x3a\x80\xd2\xed\x9d\xfb\xff\x6d\xfe\xfd\x9a\x5a\x4b\x9e\xdd\x23\xbb\xa4\xbb\x76\xff\xfe\xa8\xfe\xe8\xe2\x9f\x4c\xec\x86\xbf\x41\xae\xcf\x13\xf8\x15\x00\x00\xff\xff\x2c\x47\xb5\xde\xbe\x04\x00\x00")

func ApiSchemaReviewGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaReviewGraphql,
		"../api/schema/review.graphql",
	)
}

func ApiSchemaReviewGraphql() (*asset, error) {
	bytes, err := ApiSchemaReviewGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/review.graphql", size: 1214, mode: os.FileMode(420), modTime: time.Unix(1591880058, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ApiSchemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\xce\x48\xcd\x4d\x54\xa8\xe6\x52\x50\x28\x2c\x4d\x2d\xaa\xb4\x52\x08\x04\x51\x5c\x0a\x0a\xb9\xa5\x25\x89\x25\x99\xf9\x79\x56\x0a\xbe\x50\x16\x57\x2d\x17\x20\x00\x00\xff\xff\x1f\x5d\x4a\xc1\x2f\x00\x00\x00")

func ApiSchemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaSchemaGraphql,
		"../api/schema/schema.graphql",
	)
}

func ApiSchemaSchemaGraphql() (*asset, error) {
	bytes, err := ApiSchemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/schema.graphql", size: 47, mode: os.FileMode(420), modTime: time.Unix(1591880060, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ApiSchemaSearchGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x4e\x4d\x2c\x4a\xce\x08\x4a\x2d\x2e\xcd\x29\x51\xa8\xe6\x52\x50\xc8\x4b\xcc\x4d\xb5\x52\x08\x2e\x29\xca\xcc\x4b\x57\xe4\x52\x50\x48\x4c\x49\x29\x4a\x2d\x2e\x46\x16\x2a\xca\x4f\x4c\x71\xc4\x14\xae\xca\xcf\x4b\xf5\xcb\x47\x16\xc9\x49\x2c\xb1\x52\x70\xcb\xc9\x4f\x2c\x01\xf3\xf2\xd2\xe1\xbc\x5a\x2e\x40\x00\x00\x00\xff\xff\x6f\x6b\x54\xcc\x7e\x00\x00\x00")

func ApiSchemaSearchGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_ApiSchemaSearchGraphql,
		"../api/schema/search.graphql",
	)
}

func ApiSchemaSearchGraphql() (*asset, error) {
	bytes, err := ApiSchemaSearchGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "../api/schema/search.graphql", size: 126, mode: os.FileMode(420), modTime: time.Unix(1591544486, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"../api/schema/bldg.graphql": ApiSchemaBldgGraphql,
	"../api/schema/common.graphql": ApiSchemaCommonGraphql,
	"../api/schema/mutation.graphql": ApiSchemaMutationGraphql,
	"../api/schema/query.graphql": ApiSchemaQueryGraphql,
	"../api/schema/review.graphql": ApiSchemaReviewGraphql,
	"../api/schema/schema.graphql": ApiSchemaSchemaGraphql,
	"../api/schema/search.graphql": ApiSchemaSearchGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"..": &bintree{nil, map[string]*bintree{
		"api": &bintree{nil, map[string]*bintree{
			"schema": &bintree{nil, map[string]*bintree{
				"bldg.graphql": &bintree{ApiSchemaBldgGraphql, map[string]*bintree{}},
				"common.graphql": &bintree{ApiSchemaCommonGraphql, map[string]*bintree{}},
				"mutation.graphql": &bintree{ApiSchemaMutationGraphql, map[string]*bintree{}},
				"query.graphql": &bintree{ApiSchemaQueryGraphql, map[string]*bintree{}},
				"review.graphql": &bintree{ApiSchemaReviewGraphql, map[string]*bintree{}},
				"schema.graphql": &bintree{ApiSchemaSchemaGraphql, map[string]*bintree{}},
				"search.graphql": &bintree{ApiSchemaSearchGraphql, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

