// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
}

type Bldg struct {
	ID          string  `json:"id"`
	Lat         float64 `json:"lat"`
	Lng         float64 `json:"lng"`
	Rating      float64 `json:"rating"`
	Address     string  `json:"address"`
	RoadAddress string  `json:"roadAddress"`
	UpdatedAt   string  `json:"updated_at"`
}

func (Bldg) IsNode() {}

type CreateReviewInput struct {
	Lat     float64           `json:"lat"`
	Lng     float64           `json:"lng"`
	Title   string            `json:"title"`
	Content string            `json:"content"`
	Score   *ReviewScoreInput `json:"score"`
}

type PageInfo struct {
	EndCursor       *string `json:"endCursor"`
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
}

type ReviewOrder struct {
	Field     ReviewField    `json:"field"`
	Direction OrderDirection `json:"direction"`
}

type ReviewScoreInput struct {
	Rent            int `json:"rent"`
	MaintenanceFees int `json:"maintenanceFees"`
	PublicTransport int `json:"publicTransport"`
	Convenience     int `json:"convenience"`
	Landlord        int `json:"landlord"`
}

type UpdateReviewInput struct {
	ID      string            `json:"id"`
	Title   *string           `json:"title"`
	Content *string           `json:"content"`
	Score   *ReviewScoreInput `json:"score"`
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ReviewField string

const (
	ReviewFieldUpdatedAt ReviewField = "UPDATED_AT"
)

var AllReviewField = []ReviewField{
	ReviewFieldUpdatedAt,
}

func (e ReviewField) IsValid() bool {
	switch e {
	case ReviewFieldUpdatedAt:
		return true
	}
	return false
}

func (e ReviewField) String() string {
	return string(e)
}

func (e *ReviewField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ReviewField(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ReviewField", str)
	}
	return nil
}

func (e ReviewField) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
